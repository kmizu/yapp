options{
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
  USER_CHAR_STREAM = true;
}

PARSER_BEGIN(ESLLParserByJavaCC)
package jp.gr.java_conf.mizu.esll.parser;
import jp.gr.java_conf.mizu.esll.*;
import java.util.*;
import java.io.*;
import static jp.gr.java_conf.mizu.esll.Ast.*;
public class ESLLParserByJavaCC {
  public static void main(String[] args)throws Exception {
    ESLLParserByJavaCC parser = new ESLLParserByJavaCC(
      new BackupCharStream(new InputStreamReader(System.in))
    );
    while(true) {
      parser.statement();
    }
  }
  private static Pos pos(Token t){
  	return new Pos(t.beginLine, t.beginColumn);
  }
  private static Pos pos(int line, int column) {
  	return new Pos(line, column);
  }
  private static String unescape(String s){
    StringBuffer sb = new StringBuffer();
    for(int i = 0; i < s.length(); i++){
      char ch = s.charAt(i);
      if(ch != '\\'){
        sb.append(ch);
        continue;
      }
      i++;
      ch = s.charAt(i);
      switch(ch){
      case 'n':
        sb.append('\n');
        break;
      case 't':
        sb.append('\t');
        break;
      case 'b':
        sb.append('\b');
        break;
      case 'r':
        sb.append('\r');
        break;
      case 'f':
        sb.append('\f');
        break;
      case '\'':
        sb.append('\'');
      case '\\':
        sb.append('\\');
        break;
      default:
        sb.append(ch);
        break;
      }
    }
    return new String(sb);
  }
  
  // Copy from http://www.engr.mun.ca/~theo/JavaCC-FAQ/SetState.txt
  // JavaCC hack for doing lexical state transitions syntactically
  private void SetState(int state) {
    if (state != token_source.curLexState) {
      Token root = new Token(), last=root;
      root.next = null;

      // First, we build a list of tokens to push back, in backwards order
      while (token.next != null) {
        Token t = token;
        // Find the token whose token.next is the last in the chain
        while (t.next != null && t.next.next != null)
          t = t.next;

        // put it at the end of the new chain
        last.next = t.next;
        last = t.next;

        // If there are special tokens, these go before the regular tokens,
        // so we want to push them back onto the input stream in the order
        // we find them along the specialToken chain.

        if (t.next.specialToken != null) {
          Token tt=t.next.specialToken;
          while (tt != null) {
            last.next = tt;
            last = tt;
            tt.next = null;
            tt = tt.specialToken;
          }
        }
        t.next = null;
      };

      while (root.next != null) {
        token_source.backup(root.next.image.length());
        root.next = root.next.next;
      }
      jj_ntk = -1;
      token_source.SwitchTo(state);
    }
  }
}
PARSER_END(ESLLParserByJavaCC)

<DEFAULT> SKIP :
{
  " " | "\t" | "\r" | "\n"
}

TOKEN_MGR_DECLS : {
  // Required by SetState
  void backup(int n) { input_stream.backup(n); } 
}

<DEFAULT> TOKEN:
{
  <NUMBER: "0" | (["1"-"9"]) (["0"-"9"])*>
| <PLUS: "+">
| <MINUS: "-">
| <ASTER: "*">
| <SLASH: "/">
| <PERC: "%">
| <LPAREN: "(">
| <RPAREN: ")">
| <LB: "{">
| <RB: "}">
| <EQ: "=">
| <SEMI: ";">
| <COMMA: ",">
| <DQUOTE1: "\"">
| <PRINT: "print">
| <IF: "if">
| <ELSE: "else">
| <FUN: "fun">
| <VAR: "var">
| <IDENT:
    ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*
  > 
}

<IN_STRING> TOKEN: {
  <BEGIN_EXPR: "#{">
| <DQUOTE2: "\"">
| <CONTENT: (("#" (~["{"]))
            |(~["\"","\\","\n","\r", "#"])
            |("\\" ["n","t","b","r","f","\\","'","\""]))+ >
}

Program program() : {
  Declaration d;
  List<Declaration> declarations = new ArrayList<Declaration>();
}{
  (d=declaration() {declarations.add(d);})+ <EOF> {
    return new Program(declarations.get(0).pos, declarations);
  }
}

Declaration declaration() : {Declaration d;}{
  (d=functionDeclaration() | d=globalVariableDeclaration()){return d;}
}

GlobalVariableDeclaration globalVariableDeclaration() : {Token t, n;}{
  t=<VAR> n=<IDENT> <SEMI> {return new GlobalVariableDeclaration(pos(t), t.image);}
}

FunctionDeclaration functionDeclaration(): {
  Token t, n, p; Statement s;
  List<String> params = new ArrayList<String>();
}{
  t=<FUN> n=<IDENT> <LPAREN> 
  [n=<IDENT> {params.add(n.image);} (<COMMA> <IDENT> {params.add(n.image);})*]
  <RPAREN> s=block() {return new FunctionDeclaration(pos(t), n.image, params, s);}
}

Statement statement() : {
  Token t; Expression e;
  List<Statement> statements = new ArrayList<Statement>();  
  Statement s;
}{
  t=<PRINT> <LPAREN> e=expression() <RPAREN> <SEMI> {return new PrintStatement(pos(t), e);}
| s=block() {return s;}
| s=ifStatement() {return s;}
| e=expression() <SEMI> {return new ExpressionStatement(e.pos, e);}
}

Statement block(): {
  Token t; List<Statement> statements = new ArrayList<Statement>();
  Statement s;
}{
  t=<LB> (s=statement() {statements.add(s);})* <RB> {return new BlockStatement(pos(t), statements);}
}

Statement ifStatement() : {Token t; Expression condition; Statement thenBody, elseBody = null;}{
  t=<IF> <LPAREN> condition=expression() <RPAREN> thenBody=statement() [LOOKAHEAD(2) <ELSE> elseBody=statement()] 
  {return new IfStatement(pos(t), condition, thenBody, elseBody);}  
}

Expression expression() :{Token t = null; Expression l,r;}{
  l=additive() [<EQ> r=expression() {l = new BinaryExpression(pos(t), Operator.ASSIGN, l, r);}]
  {return l;}
}

Expression additive() :{Token t; Expression l,r;}{
  l=multitive() 
  ( t=<PLUS> r=multitive() {l = new BinaryExpression(pos(t), Operator.PLUS, l, r);}
  | t=<MINUS> r=multitive() {l = new BinaryExpression(pos(t), Operator.MINUS, l, r);}
  )* {return l;}
}

Expression multitive() :{Token t; Expression l,r;}{
  l=primary() 
  ( t=<ASTER> r=primary() {l = new BinaryExpression(pos(t), Operator.MULT, l, r);}
  | t=<SLASH> r=primary() {l = new BinaryExpression(pos(t), Operator.DIV, l, r);}
  | t=<PERC> r=primary() {l = new BinaryExpression(pos(t), Operator.MOD, l, r);}
  )* {return l;}
}

Expression primary() :{
  Token t; Expression e;
  List<Expression> es = new ArrayList<Expression>();
}{
  <LPAREN> e=expression() <RPAREN> {return e;}
| e=string() {return e;} 
| LOOKAHEAD(2) t=<IDENT> <LPAREN> 
  [e=expression() {es.add(e);} <COMMA> (e=expression() {es.add(e);})*]
  <RPAREN>
  {return new FunctionCall(pos(t), t.image, es);}
| t=<IDENT> {return new Identifier(pos(t), t.image);}
| t=<NUMBER> {return new NumberLiteral(pos(t), Integer.parseInt(t.image));}
}

Expression string() :{Token t, s; Expression e; List<Expression> es = new ArrayList<Expression>();}{
  t=<DQUOTE1> {SetState(1);/* -> <IN_STRING> */} 
  (<BEGIN_EXPR> {SetState(0);/* -> <DEFAULT> */} e=expression() {es.add(e);} <RB> {SetState(1); /* -> <IN_STRING> */}
  |s=<CONTENT> {es.add(new StringLiteral(pos(s), s.image));}) * 
  <DQUOTE2> {SetState(0);/* -> <DEFAULT> */} {
    if(es.size() == 0) {return new StringLiteral(pos(t), "");}
    else if(es.size() == 1) {return es.get(0);}
    else {
      Expression l = es.get(0);
      for(Expression r:es.subList(1, es.size())) {
        l = new BinaryExpression(l.pos, Operator.PLUS, l, r);
      }
      return l;
    }
  }
}