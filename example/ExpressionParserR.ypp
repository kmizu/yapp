Integer statement <[ Integer n = null; ]> = spacing n:expression spacing ";" %{n} ;

Integer expression <[ Integer n = null; ]> = n:additive %{n} ;

Integer additive <[ Integer l = null, r = null; ]> = 
  l:multitive
  ( spacing "+" spacing r:multitive <[ l = l + r; ]>
  / spacing "-" spacing r:multitive <[ l = l - r; ]>
  )* %{l}
  ;

Integer multitive <[ Integer l = null, r = null; ]> =
  l:primary
  ( spacing "*" spacing r:primary <[ l = l * r; ]>
  / spacing "/" spacing r:primary <[ l = l / r; ]>
  / spacing "%" spacing r:primary <[ l = l % r; ]>
  )* %{l}
  ;

Integer primary <[ String s = null; Integer n = null; ]> =
  s:number %{Integer.valueOf(s)} / "(" spacing n:expression spacing ")" %{n}
  ;

String number <[ String d = "", n = null; ]> = (n:digit <[ d = d + n; ]>)+ %{d} ;

String digit <[ String d = null; ]> =
  ( d:"0" / d:"1" / d:"2" / d:"3" / d:"4"
  / d:"5" / d:"6" / d:"7" / d:"8" / d:"9"
  ) %{d}
  ;

spacing  = space* ;

space =  " " / "\t" / "\r" / "\n" ;