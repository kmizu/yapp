<?xml version="1.0" encoding="UTF-8"?>

<project name="yapp" default="compile" basedir=".">
  <property environment="env"/>
  <property name="src"               value="src"/>
  <property name="src.test"          value="src.test"/>
  <property name="src.benchmark"     value="src.benchmark"/>
  <property name="bin"               value="bin"/>
  <property name="grammar"           value="grammar"/>
  <property name="docs"              value="docs"/>
  <property name="build"             value="build"/>
  <property name="build.test"        value="build.test"/>
  <property name="build.benchmark"   value="build.benchmark"/>
  <property name="parser"            value="src/jp/gr/java_conf/mizu/yapp/parser"/>
  <property name="parser.esll"       value="src/jp/gr/java_conf/mizu/esll/parser"/>
  <property name="benchmark"         value="jp/gr/java_conf/mizu/yapp/benchmark/parser"/>
  <property name="example"           value="example"/>
  <property name="data"              value="data"/>
  <property name="jar.name"          value="yapp.jar"/>
  <property name="lib.rats"          value="lib/rats-1.14.3/xtc.jar"/>
  <property name="resources"         value="resources"/>
  <property name="report.test"       value="report"/>
  <property name="package.esll"      value="jp.gr.java_conf.mizu.esll"/>
  <property name="package.benchmark" value="jp.gr.java_conf.mizu.yapp.benchmark.parser"/>
  <property name="yapp"              value="jp.gr.java_conf.mizu.yapp.tools.YappMain"/>
  <property file="build.properties"/>
	
  <macrodef name="yapp" description="run yapp(Yet Another Packrat Parser Generator">
    <attribute name="file"/>
    <attribute name="package"/>
    <attribute name="destdir"/>
    <attribute name="options"/>
    <sequential>
      <java classname="${yapp}" fork="true">
        <jvmarg line="-Xms256m -Xmx256m"/>
        <arg line="--pkg @{package} @{options} @{file} @{destdir}"/>
        <classpath path="build"/>
      </java>
    </sequential>
  </macrodef>
		
  <fileset id="shared" dir=".">
    <include name="${bin}/**"/>
    <include name="${docs}/**"/>
    <include name="${example}/**"/>
    <include name="Install.txt"/>
    <include name="Readme.txt"/>
    <include name="license.txt"/>
  </fileset>

  <target name="grammar">
    <mkdir dir="${parser}"/>
  	<mkdir dir="${parser.esll}"/>
    <javacc
      target="${grammar}/YappParser.jj"
      unicodeinput="true"
      javaunicodeescape="true"
      outputdirectory="${parser}"
      javacchome="${javacc.home}"/>
  	<copy file="${grammar}/BackupCharStream.java" tofile="${parser.esll}/BackupCharStream.java"/>
  	<javacc
  	  target="${grammar}/ESLLParserByJavaCC.jj"
  	  unicodeinput="true"
  	  javaunicodeescape="true"
  	  outputdirectory="${parser.esll}"
  	  javacchome="${javacc.home}"/>
  </target>

  <target name="compile" depends="grammar">
    <mkdir dir="${build}"/>
    <javac srcdir="${src}" destdir="${build}" source="1.5" debug="false"/>
  </target>
	
	<target name="example">
    <java classname="jp.gr.java_conf.mizu.yapp.tools.YappMain" jvmargs="-Xms256m -Xmx256m">
      <arg line="--pkg ${package.benchmark} example/SimpleParser.ypp ${src.benchmark}/${benchmark}"/>
      <classpath path="build"/>
    </java>
	</target>
	
  <target name="test" depends="compile">
  	<mkdir dir="${build.test}"/>
  	<javac srcdir="${src.test}" destdir="${build.test}" source="1.5" debug="true">
  		<classpath location="${build}" />
      <classpath location="${junit.path}"/>
  	</javac>
  	<!-- mkdir dir="${report.test}"/-->
  	<junit haltonfailure="yes">
  	  <classpath>
  	  	<pathelement path="${build}"/>
  	  	<pathelement path="${build.test}"/>
  	  	<pathelement path="${junit.path}"/>
  	  </classpath>
      <formatter type="plain" usefile="false"/>
      <batchtest fork="yes">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
  	</junit>
    <filelist></filelist>
  </target>

  <target name="generate">
  	<mkdir dir="${src.benchmark}/${benchmark}"/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/JavaRecognizer.ypp" options=""/>
    <yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}" 
    	    file="${data}/JavaRecognizer.ypp" options="--pre AC --ac --ACfirst -1 --ACfollow"/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/OptimizedJavaRecognizer.ypp" options=""/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/XMLParser.ypp" options=""/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/XMLParser.ypp" options="--pre AC --ac --ACfirst -1 --ACfollow"/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/OptimizedXMLParser.ypp" options=""/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/JSONParser.ypp" options=""/>	
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/JSONParser.ypp" options="--pre AC --ac --ACfirst -1 --ACfollow"/>
    <yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
          file="${data}/OptimizedJSONParser.ypp" options=""/>
  	<yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
  	      file="${data}/ESLLParser.ypp" options=""/>
    <yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}" 
          file="${data}/ESLLParser.ypp" options="--pre AC --ac --ACfirst -1 --ACfollow"/>
    <yapp package="${package.benchmark}" destdir="${src.benchmark}/${benchmark}"
          file="${data}/OptimizedESLLParser.ypp" options=""/>
  	<java dir="." classpath="${lib.rats}" classname="xtc.parser.Rats" fork="true">
	  <arg line="-verbose -out ${src.benchmark}/${benchmark} ${data}/RatsXMLParser.rats"/>
	</java>
	<java dir="." classpath="${lib.rats}" classname="xtc.parser.Rats" fork="true">
	  <arg line="-verbose -out ${src.benchmark}/${benchmark} ${data}/RatsJSONParser.rats"/>
	</java>  	
	<java dir="." classpath="${lib.rats}" classname="xtc.parser.Rats" fork="true">
	  <arg line="-verbose -out ${src.benchmark}/${benchmark} ${data}/RatsESLLParser.rats"/>
	</java>
  	<mkdir dir="${build.benchmark}"/>
  	<javac srcdir="${src.benchmark}" destdir="${build.benchmark}" source="1.5" debug="false">
  		<classpath location="${build}"/>
  		<classpath location="${lib.rats}"/>
  	</javac>
  </target>
  
  <target name="benchmark">
    <exec command="ruby script\\performance.rb"/>
  	<!-- exec command="ruby script\\memory_usage.rb"/-->
  </target>
	
  <target name="jar" depends="compile">
    <jar destfile="${jar.name}" basedir="${build}">
      <manifest>
    	  <attribute name="Main-Class" value="${yapp}"/>
      </manifest>
    </jar>
  </target>

  <target name="clean">
    <delete dir="${build}" includes="**"/>
  	<delete dir="${build.test}" includes="**"/>
  	<delete dir="${build.benchmark}" includes="**"/>
  	<delete dir="${parser.esll}"/>
    <delete dir="${parser}" />
  </target>
</project>
